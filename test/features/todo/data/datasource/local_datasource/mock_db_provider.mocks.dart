// Mocks generated by Mockito 5.4.2 from annotations
// in todo_it/test/features/todo/data/datasource/local_datasource/task_local_datasource.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_it/common/core/data/data_base/db_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DBProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBProvider<T> extends _i1.Mock implements _i2.DBProvider<T> {
  MockDBProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as T?);
  @override
  Map<dynamic, dynamic> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i3.Future<void> add(Object? obj) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [obj],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> put(
    String? key,
    Object? obj,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            obj,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> putAt(
    int? index,
    Object? obj,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            obj,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAt(int? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  bool isNotEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isNotEmpty,
          [],
        ),
        returnValue: false,
      ) as bool);
}
